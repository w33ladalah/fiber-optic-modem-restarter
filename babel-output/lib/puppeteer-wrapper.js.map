{"version":3,"sources":["../../src/lib/puppeteer-wrapper.js"],"names":["PuppeteerWrapper","constructor","logger","filePaths","options","_logger","_filePaths","_options","headless","chromePath","undefined","browser","db","JSONdb","setup","isChromePathSet","_setChromePath","args","width","Math","ceil","random","height","push","puppeteer","use","StealthPlugin","logInfo","launch","executablePath","cleanup","close","newPage","page","_initCDPSession","_client","send","on","target","client","createCDPSession","patterns","urlPattern","e","interceptionId","exception","_getSavedPath","fs","existsSync","logError","defaultPath","_getDefaultOsPath","Array","isArray","i","length","console","log","set","get","process","platform"],"mappings":"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","file":"puppeteer-wrapper.js","sourcesContent":["import fs from 'fs';\nimport JSONdb from 'simple-json-db';\nimport puppeteer from 'puppeteer-core';\n\n/**\n * chromePath:  the path of the chrome executable in our pc\n * setup() :    initialize Puppeteer\n * cleanup():   clearnup Puppeteer\n * browser:     global Puppeteer browser instance\n * newPage():   get new page with default user agent and dimensions\n */\n\n /**\n  * options: {headless, width, height}\n  */\nexport class PuppeteerWrapper {\n    constructor(logger, filePaths, options) {\n        this._logger = logger;\n        this._filePaths = filePaths;\n        this._options = options || { headless: true };\n\n        // Public\n        this.chromePath = undefined;\n        this.browser = undefined;\n\n        this.db = new JSONdb('./settings.json');\n    }\n\n    //#region Public API setup - cleanup\n\n    async setup() {\n        const isChromePathSet = await this._setChromePath();\n        if (!isChromePathSet) {\n            return false;\n        }\n\n        const args = [];\n        const width = Math.ceil(Math.random() * (1366 - 500) + 500);\n        const height = Math.ceil(Math.random() * (768 - 300) + 300);\n\n        args.push(`--window-size=${width},${height}`);\n        args.push('--no-sandbox');\n\n        puppeteer.use(StealthPlugin());\n\n        this._logger.logInfo(\"Setting up puppeteer...\");\n        this.browser = await puppeteer.launch({\n            headless: this._options.headless,\n            executablePath: this.chromePath,\n            args\n        });\n        // console.log(await this.browser.userAgent());\n        this._logger.logInfo(\"Puppeteer initialized\");\n        return true;\n    }\n\n    async cleanup() {\n        if (this.browser) await this.browser.close();\n    }\n\n    async newPage() {\n        await this.cleanup();\n        await this.setup();\n\n        const page = await this.browser.newPage();\n\n        // page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36');\n\n        await this._initCDPSession(page);\n\n        if (this._options.width) {\n            await page._client.send('Emulation.clearDeviceMetricsOverride');\n        }\n\n        this.browser.on('targetcreated', async (target) => {\n            const page = await target.page();\n            this._initCDPSession(page);\n        });\n\n        return page;\n    }\n\n    //#endregion\n\n    //#region Helpers\n    async _initCDPSession(page) {\n        try{\n            const client = await page.target().createCDPSession();\n\n            await client.send('Network.enable');\n\n            // added configuration\n            await client.send('Network.setRequestInterception', {\n                patterns: [{ urlPattern: '*' }],\n            });\n\n            await client.on('Network.requestIntercepted', async e => {\n                // console.log('EVENT INFO: ');\n                // console.log(e.interceptionId);\n                // console.log(e.resourceType);\n                // console.log(e.isNavigationRequest);\n\n                await client.send('Network.continueInterceptedRequest', {\n                    interceptionId: e.interceptionId,\n                });\n            });\n        } catch (exception) {\n\n        }\n    }\n\n    async _setChromePath() {\n        this.chromePath = await this._getSavedPath();\n\n        if (this.chromePath) {\n            if (fs.existsSync(this.chromePath)) return true;\n\n            // The saved path does not exists\n            this._logger.logError(`Saved Chrome path does not exists: ${this.chromePath}`);\n        }\n\n        // Try the default path\n        const defaultPath = this._getDefaultOsPath();\n\n        if (Array.isArray(defaultPath)) {\n            for (let i = 0; i < defaultPath.length; i++) {\n                this.chromePath = defaultPath[i];\n                if (fs.existsSync(this.chromePath)) {\n                    console.log(this.chromePath);\n                    this.db.set('chrome_path', this.chromePath);\n                    break;\n                }\n            }\n\n            return true;\n        } else {\n            this.chromePath = defaultPath;\n\n            if (fs.existsSync(this.chromePath)) {\n                this.db.set('chrome_path', this.chromePath);\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    _getSavedPath() {\n        return this.db.get('chrome_path');\n    }\n\n    _getDefaultOsPath() {\n        if (process.platform === \"win32\") {\n            return [\n                'C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe',\n                'C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe',\n                'C:\\\\Users\\\\Hendro\\\\AppData\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe',\n            ];\n        } else {\n            return '/usr/bin/google-chrome';\n        }\n    }\n\n    //#endregion\n}\n"]}